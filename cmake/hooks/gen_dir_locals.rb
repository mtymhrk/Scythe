#!/usr/bin/env ruby

require 'fileutils'
require 'tempfile'
require 'yaml'

START_LINE  = ';;; ***  GENERATED BY GEN_DIR_LOCALS.RB START ***'
END_LINE    = ';;; ***  GENERATED BY GEN_DIR_LOCALS.RB END *****'
INSERTION_MARK = ';;; < GEN_DIR_LOCALS.RB >'

def dir_locals_path(builddir, yml_file)
  dir = File.dirname(yml_file).slice((builddir.length + 1)..-1)
  File.join(dir, '.dir-locals.el')
end

def replace_file_contents(path)
  return unless block_given?

  file = Tempfile.open(File.basename(path))
  yield(file)
  file.close(false)
  FileUtils.mv(file.path, path)
end

def delete_old_build_information(path)
  return unless File.exist?(path)

  lines = File.open(path) { |f| f.readlines }
  ignore = false
  replace_file_contents(path) do |file|
    lines.each do |line|
      l = line.chomp
      ignore = true if l == START_LINE
      file.print(line) unless ignore
      if l == END_LINE
        ignore = false
        file.puts(INSERTION_MARK)
      end
    end
  end
end

def str_extern(str)
  '"' + str + '"'
end

def format_compiler_type(info)
  type = case
         when /clang/i =~ info['compiler']
           'clang'
         when /gcc/i =~ info['compiler']
           'gcc'
         when /cc/i =~ info['compiler']
           'gcc'
         else
           'unknown'
         end

  "(compiler-type . #{type})"
end

def format_compiler_path(info)
  str = if info['compiler']
          info['compiler']
        else
          'nil'
        end

  "(compiler-path . #{str_extern(str)})"
end

def format_compile_flags(info)
  flg = if info['flags']
          info['flags'].select {|x| /\A-W.*/ !~ x }
        else
          []
        end

  str = if flg.empty?
          'nil'
        else
          '(' + flg.map { |x| str_extern(x) }.join(' ') + ')'
        end

  "(compile-flags . #{str})"
end

def format_compile_warnings(info)
  flg = if info['flags']
          info['flags'].select { |x| /\A-W+.*/ =~ x }
        else
          []
        end

  str = if flg.empty?
          'nil'
        else
          '(' + flg.map { |x| str_extern(x.slice(2..-1)) }.join(' ') + ')'
        end

  "(compile-warnings . #{str})"
end

def format_compile_quoted_include_paths(info)
  str = if info['quoted-include-paths']
          s = '('
          s << info['quoted-include-paths'].map { |x| str_extern(x) }.join(' ')
          s + ')'
        else
          'nil'
        end

  "(compile-quoted-include-paths . #{str})"
end

def format_compile_include_paths(info)
  str = if info['include-paths']
          s = '('
          s << info['include-paths'].map { |x| str_extern(x) }.join(' ')
          s + ')'
        else
          'nil'
        end

  "(compile-include-paths . #{str})"
end

def format_compile_definitions(info)
  str = if info['definitions']
          s = '('
          s << info['definitions'].map { |x| str_extern(x) }.join(' ')
          s + ')'
        else
          'nil'
        end

  "(compile-definitions . #{str})"
end

def format_build_info(info)
  cmpl_type = format_compiler_type(info)
  cmpl_path = format_compiler_path(info)
  cmpl_flags = format_compile_flags(info)
  cmpl_warnings = format_compile_warnings(info)
  cmpl_quoted_include_paths = format_compile_quoted_include_paths(info)
  cmpl_include_paths = format_compile_include_paths(info)
  cmpl_definitions = format_compile_definitions(info)

  <<"EOS"
#{START_LINE}

(build-information . ((project-name . "Scythe")
                      #{cmpl_type}
                      #{cmpl_path}
                      #{cmpl_flags}
                      #{cmpl_warnings}
                      #{cmpl_quoted_include_paths}
                      #{cmpl_include_paths}
                      #{cmpl_definitions}))

#{END_LINE}
EOS
end

def make_dir_locals_file(path)
  File.open(path, 'w') do |file|
    file.puts(<<"EOS")
((c-mode . (
#{INSERTION_MARK}
)))
EOS
  end
end

def inseart_build_information(path, info)
  str = format_build_info(info)

  make_dir_locals_file(path) unless FileTest.exist?(path)

  lines = File.open(path) { |f| f.readlines }
  replace_file_contents(path) do |file|
    lines.each do |line|
      l = line.chomp
      if /\A;+\s*<\s*GEN_DIR_LOCALS.RB\s*>/i =~ l
        file.puts(str)
      else
        file.print(line)
      end
    end
  end
end

if $PROGRAM_NAME == __FILE__
  if ARGV.length == 0
    $stderr.puts("#{$PROGRAM_NAME}: error: too few arguments")
    $stderr.puts("Usage: #{$PROGRAM_NAME} BUILD_DIR_NAME")
    exit 1
  end

  builddir = ARGV[0].sub(/\/*\Z/, '')
  glob = File.join(builddir, '**/build-info.yml')
  Dir[glob].each do |yml_file|
    info = YAML.load(File.open(yml_file).read)
    next unless info

    path = dir_locals_path(builddir, yml_file)
    delete_old_build_information(path)
    inseart_build_information(path, info)
  end
end
