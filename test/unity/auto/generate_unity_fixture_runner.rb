class UnityFixtureRunnerGenerator

  def initialize()
  end

  def find_tests(tbl, input)
    contents = input.read

    # remove line comments and  block comments
    contents = contents.gsub(/\/\/.*$/, '').gsub(/\/\*.*?\*\//m, '')

    # Treat preprocessor directives as a logical line
    # Match ;, {, and } as end of lines
    lines = contents.split(/ (^\s*\#.*$) | (;|\{|\}) /x)

    lines.each do |line|
      if line =~ /^\s*(IGNORE_)?TEST\(\s*([^\s,]+)\s*,\s*([^\s)]+\s*)\)/
        tbl[$2].push $3
      end
    end
  end

  def generate_header(output)
    output.puts '/* AUTOGENERATED FILE. DO NOT EDIT. */'
    output.puts
    output.puts '#include "unity_fixture.h"'
    output.puts
  end

  def generate_group_runner(output, tests)
    tests.keys.each do |group|
      output.puts "TEST_GROUP_RUNNER(#{group})"
      output.puts '{'

      tests[group].each do |test|
        output.puts "  RUN_TEST_CASE(#{group}, #{test});"
      end

      output.puts '}'
      output.puts
    end
  end

  def generate_runner(output, tests)
    output.puts 'static void RunAllTests(void)'
    output.puts '{'
    tests.keys.each do |group|
      output.puts "  RUN_TEST_GROUP(#{group});"
    end
    output.puts '}'
    output.puts
  end

  def generate_main(output)
    output.puts 'int main(int argc, char *argv[])'
    output.puts '{'
    output.puts '  return  UnityMain(argc, argv, RunAllTests);'
    output.puts '}'
  end

  def generate(input_files, output, tests)
    generate_header(output)
    generate_group_runner(output, tests)
    generate_runner(output, tests)
    generate_main(output)
  end

  def run(input_files, output_file)
    tests = Hash.new {|h, k| h[k] = [] }

    input_files.each do |file|
      File.open(file, 'r') do |input|
        find_tests(tests, input);
      end
    end

    if output_file.is_a?(IO)
      generate(input_files, output_file, tests)
    else
      File.open(output_file, 'w') do |output|
        generate(input_files, output, tests)
      end
    end
  end

end


if ($0 == __FILE__)
  UnityFixtureRunnerGenerator.new.run(ARGV, $stdout)
end
