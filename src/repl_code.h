#ifndef INCLUDE_REPL_CODE_H__
#define INCLUDE_REPL_CODE_H__

static const char *repl_code = "((asm-close 0 0 ((frame) (asm-close 0 1 ((eframe) (asm-close 1 1 ((frame) (sref 0 0) (push) (gref display (scythe internal repl)) (call 1) (arity -1) (cframe) (gref newline (scythe internal repl)) (call 0) (arity -1) (eframe) (immval #t) (push) (sref 0 1) (tcall 1))) (push) (asm-close 1 0 ((frame) (immval \"> \") (push) (gref display (scythe internal repl)) (call 1) (arity -1) (cframe) (gref flush-output-port (scythe internal repl)) (call 0) (arity -1) (eframe) (cframe) (gref read (scythe internal repl)) (call 0) (arity 1) (push) (ecommit 1) (emine 1) (asm-close 3 1 ((frame) (sref 0 0) (push) (gref eof-object? (scythe internal repl)) (call 1) (arity 1) (jmpf lbl_when-a_2) (frame) (immval #f) (push) (sref 0 3) (call 1) (arity -1) (jmp lbl_when-j_1) (label lbl_when-a_2) (undef) (label lbl_when-j_1) (frame) (frame) (sref 0 0) (push) (gref eval (scythe internal repl)) (call 1) (arity 1) (push) (gref write (scythe internal repl)) (call 1) (arity -1) (cframe) (gref newline (scythe internal repl)) (call 0) (arity -1) (frame) (immval \"> \") (push) (gref display (scythe internal repl)) (call 1) (arity -1) (cframe) (gref flush-output-port (scythe internal repl)) (call 0) (arity -1) (eframe) (cframe) (gref read (scythe internal repl)) (call 0) (arity 1) (push) (sref 0 1) (tcall 1))) (demine 0 0) (eframe) (sref 0 1) (push) (sref 0 0) (tcall 1))) (push) (gref with-exception-handler (scythe internal repl)) (tcall 2))) (push) (gref call/cc (scythe internal repl)) (call 1) (arity 1) (jmpf lbl_when-a_0) (gref read-eval-print-loop (scythe internal repl)) (tcall 0) (label lbl_when-a_0) (undef) (return))) (gdef read-eval-print-loop (scythe internal repl)))";

#endif  /*  INCLUDE_REPL_CODE_H__ */
